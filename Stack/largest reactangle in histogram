class Solution {
//     public int largestRectangleAreaBF(int[] heights) {
//         int maxArea=0;
//         for (int i = 0; i < heights.length; i++) {
//           int minHeight = heights[i];
//         for (int j = i; j < heights.length; j++) {
//           minHeight = Math.min(minHeight, heights[j]);
//           int width = j - i + 1;
//         maxArea = Math.max(maxArea, minHeight * width);
//     }
// }

//         return maxArea;
        
//     }
     public int largestRectangleArea(int[] heights){
        int n = heights.length ;
        int pse[] = new int [n];
        Stack<Integer> stack = new Stack<>();
        for( int i = 0 ; i< n ;i++){
            while(!stack.isEmpty() && heights[stack.peek()]>=heights[i]){
                stack.pop();
            }
            pse[i]=stack.isEmpty()?-1:stack.peek();
            stack.push(i);
        }
        stack.clear();
        int nse[] = new int[n];
        for( int j = n-1 ; j>=0 ;j--){
            while(!stack.isEmpty() && heights[stack.peek()]>heights[j]){
                stack.pop();
            }
            nse[j]=stack.isEmpty()?n:stack.peek();
            stack.push(j);
        }
        int area = 0;
        for( int k = 0 ;k<n ;k++){
          area = Math.max(area , heights[k]*(nse[k]-pse[k]-1));
        }
        return area;
     }
}
