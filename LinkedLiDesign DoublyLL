// problem : design doubly ll
//difficulty : medium
//topic : linkedlist
class Node {
    int val; // instnace var
    Node next;
    Node prev;
    Node( int val){ // local var
        this.val=val;// instance var = local var
    }
}
    class MyLinkedList {
        Node head;
        int size;
        Node tail;

    public MyLinkedList() {
        size=0;
        
    }
    
    public int get(int index) {
        if(index<0 || index>=size) return-1;
        else {
            Node temp = head ;
            for( int i = 0 ; i < index;i++){
                temp=temp.next;
            }
            return temp.val;
        }
        
    }
    
    public void addAtHead(int val) {
        Node node = new Node(val);
        size++;
        if(head==null){
            head=node;
            tail=node;
        }
        else {
            head.prev=node; // this is for doublyll
            node.next=head;
            head=node;
        }
        
    }
    
    public void addAtTail(int val) {
        Node node =new Node(val);
        size++;
        if(head==null){
            head = node;
            tail=node;
        }
        else {
            tail.next=node;
            node.prev=tail;
            tail=node;
        }
        
    }
    
    public void addAtIndex(int index, int val) {
        if(index<0 || index>size){
            return;
        }
        if(index==0) addAtHead(val);
       else if(index==size) addAtTail(val);
       else {
         Node temp = head;
        Node node = new Node(val);
        for( int i = 0 ; i<index-1 ;i++){
            temp=temp.next;
        }
        node.prev=temp;
        node.next=temp.next;
        temp.next.prev=node;
        temp.next=node;
        node.prev=temp;
        size++;
       }
        
    }
    
    public void deleteAtIndex(int index) {
        if (index < 0 || index >= size) return;

        if (index == 0) {
            if (head == tail) {
                head = tail = null;
            } else {
                head = head.next;
                head.prev = null;
            }
        } else if (index == size - 1) {
            tail = tail.prev;
            tail.next = null;
        } else {
            Node temp = head;
            for (int i = 0; i < index; i++) {
                temp = temp.next;
            }
            temp.prev.next = temp.next;
            temp.next.prev = temp.prev;
        }
        size--;
    }
        
        
    }


/**
 * Your MyLinkedList object will be instantiated and called as such:
 * MyLinkedList obj = new MyLinkedList();
 * int param_1 = obj.get(index);
 * obj.addAtHead(val);
 * obj.addAtTail(val);
 * obj.addAtIndex(index,val);
 * obj.deleteAtIndex(index);
 */
