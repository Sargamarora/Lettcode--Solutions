// problem : design hashmap
// difficulty: easy
lass Node {
    int key;
    int val ;
    Node next;
    Node( int key , int val){
        this.key=key;
        this.val=val;
    }
    }
    class MyHashMap {
        private int size;
        private Node buckets[];

    public MyHashMap() {
        size = 1000;
        buckets= new Node[size];
        
    }
    
    public void put(int key, int value) {
        int index = hash(key);
        if(buckets[index]==null){
            buckets[index]=new Node(key,value);
            return;
        }
        Node current = buckets[index];
        while(current!=null)
        {
            if(current.key==key){
                current.val=value;
                return;
            }
            if(current.next==null){
                current.next=new Node(key,value);
            }
            current=current.next;
        }
        
    }
    
    public int get(int key) {
        int index = hash(key);
        Node curr = buckets[index];
        while(curr!=null){
            if(curr.key==key){
                return curr.val;
            }
            curr=curr.next;
        }
        return -1;
        
    }
    
    public void remove(int key) {
        int index = hash(key);
        Node curr = buckets[index];
        if(curr==null) return;
        if(curr.key==key) buckets[index]=curr.next;
        while(curr.next!=null){
            if(curr.next.key==key){
                curr.next=curr.next.next;
                return ;
            }
            curr=curr.next;
        }
        
    }
    public int hash( int key){
        return key%size;
    }
}

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap obj = new MyHashMap();
 * obj.put(key,value);
 * int param_2 = obj.get(key);
 * obj.remove(key);
 */
