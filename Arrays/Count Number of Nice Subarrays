class Solution {
    public int numberOfSubarraysBF(int[] nums, int k) {  // tc-o(n2)
        int niceSubArray = 0 ;
        int n = nums.length;
        for( int i = 0 ; i< n ;i++){
            int odd = 0 ;
            for( int j = i ; j< n ;j++){
                if(nums[j]%2!=0){
                    odd++;
              }
              if(odd==k){
                niceSubArray++;
              }  
            }
        }
        return niceSubArray;
        
    }
    public int numberOfSubarrays(int[] nums, int k){
        return atMostOdd(nums,k) - atMostOdd(nums,k-1);
    }
    public int atMostOdd( int nums[], int k){
        int n = nums.length;
        int start = 0;
        int end = 0 ;
        int odd = 0 ;
        int count = 0;
        while(end<n){
            if(nums[end]%2!=0){
                odd++;
            }
            while(odd>k){
                if(nums[start]%2!=0){
                    odd--;
                }
                start++;
            }
           count+=(end-start+1);
            end++;
        }
        return count;
    }
}
